#!/usr/bin/env python3
# coding: utf-8

import importlib
import importlib.util
import json
from pathlib import Path
from typing import Any, Dict, List

from nii_dg.entity import (ContextualEntity, DataEntity, DefaultEntity,
                           RootDataEntity)
from nii_dg.ro_crate import ROCrate

# === load test module ===

here = Path(__file__).parent.resolve()
test_module_path = here.joinpath("../example/package_invalid_crate2.py").resolve()
spec = importlib.util.spec_from_file_location("package_invalid_crate2", test_module_path)
test_module = importlib.util.module_from_spec(spec)  # type: ignore
spec.loader.exec_module(test_module)  # type: ignore

package_invalid_crate = test_module.package_invalid_crate

# === test ===

expect_jsonld = json.loads("""\
{
  "@context": "https://w3id.org/ro/crate/1.1/context",
  "@graph": [
    {
      "@id": "./",
      "@type": "Dataset",
      "@context": "https://w3id.org/ro/crate/1.1/context",
      "hasPart": [
        {
          "@id": "file_1.txt"
        }
      ],
      "datePublished": "2023-05-25T03:35:21.102+00:00",
      "name": "example research project"
    },
    {
      "@id": "ro-crate-metadata.json",
      "@type": "CreativeWork",
      "@context": "https://w3id.org/ro/crate/1.1/context",
      "conformsTo": {
        "@id": "https://w3id.org/ro/crate/1.1"
      },
      "about": {
        "@id": "./"
      }
    },
    {
      "@id": "file_1.txt",
      "@type": "File",
      "@context": "https://raw.githubusercontent.com/NII-DG/nii-dg/0.1.2/schema/context/cao.jsonld",
      "name": "Sample File",
      "contentSize": "156GB",
      "dmpDataNumber": {
        "@id": "#dmp:1"
      }
    },
    {
      "@id": "https://www.nii.ac.jp/",
      "@type": "HostingInstitution",
      "@context": "https://raw.githubusercontent.com/NII-DG/nii-dg/0.1.2/schema/context/base.jsonld",
      "name": "National Institute of Informatics",
      "address": "Tokyo Japan"
    },
    {
      "@id": "https://en.wikipedia.org/wiki/Ichiro_Suzuki",
      "@type": "Person",
      "@context": "https://raw.githubusercontent.com/NII-DG/nii-dg/0.1.2/schema/context/cao.jsonld",
      "name": "Ichiro Suzuki",
      "affiliation": {
        "@id": "https://www.nii.ac.jp/"
      },
      "email": "ichiro@example.com"
    },
    {
      "@id": "https://example.com/repository",
      "@type": "RepositoryObject",
      "@context": "https://raw.githubusercontent.com/NII-DG/nii-dg/0.1.2/schema/context/base.jsonld",
      "name": "sample repository"
    },
    {
      "@id": "#dmp:1",
      "@type": "DMP",
      "@context": "https://raw.githubusercontent.com/NII-DG/nii-dg/0.1.2/schema/context/cao.jsonld",
      "dataNumber": 1,
      "name": "execution results",
      "description": "Files generated by execution of workflow.",
      "creator": [
        {
          "@id": "https://en.wikipedia.org/wiki/Ichiro_Suzuki"
        }
      ],
      "keyword": "Informatics",
      "accessRights": "metadata only access",
      "repository": {
        "@id": "https://example.com/repository"
      },
      "hostingInstitution": {
        "@id": "https://www.nii.ac.jp/"
      },
      "dataManager": {
        "@id": "https://en.wikipedia.org/wiki/Ichiro_Suzuki"
      }
    },
    {
      "@id": "#CAO-DMP",
      "@type": "DMPMetadata",
      "@context": "https://raw.githubusercontent.com/NII-DG/nii-dg/0.1.2/schema/context/cao.jsonld",
      "name": "CAO-DMP",
      "about": {
        "@id": "./"
      },
      "funder": {
        "@id": "https://www.nii.ac.jp/"
      },
      "keyword": "Informatics",
      "hasPart": [
        {
          "@id": "#dmp:1"
        }
      ]
    }
  ]
}
""")


def compare_jsonld_graph(expect: List[Dict[str, Any]], actual: List[Dict[str, Any]]) -> None:
    """\
    exclude:
        - @context
            - cause of changing depends on version of module
        - datePublished
            - cause of changing
    """
    expect_dict = {f"{ent['@id']}_{ent['@type']}": ent for ent in expect}
    actual_dict = {f"{ent['@id']}_{ent['@type']}": ent for ent in actual}
    assert expect_dict.keys() == actual_dict.keys()

    for id_type in expect_dict.keys():
        expect_ent = expect_dict[id_type]
        actual_ent = actual_dict[id_type]
        assert expect_ent.keys() == actual_ent.keys()
        for key in expect_ent.keys():
            if key in ["@context", "datePublished"]:
                continue
            assert expect_ent[key] == actual_ent[key]


def test_package_invalid_crate() -> None:
    ro_crate = package_invalid_crate()

    assert isinstance(ro_crate, ROCrate)
    for default_ent in ro_crate.default_entities:
        assert isinstance(default_ent, DefaultEntity)
    for data_ent in ro_crate.data_entities:
        assert isinstance(data_ent, DataEntity)
    for contextual_ent in ro_crate.contextual_entities:
        assert isinstance(contextual_ent, ContextualEntity)
    assert isinstance(ro_crate.root, RootDataEntity)

    actual_jsonld = ro_crate.as_jsonld()
    assert expect_jsonld["@context"] == actual_jsonld["@context"]
    compare_jsonld_graph(expect_jsonld["@graph"], actual_jsonld["@graph"])
